# refer to a resource group
data "azurerm_resource_group" "test" {
  name = "nancyResourceGroup"
}

#refer to a subnet
data "azurerm_subnet" "test" {
  name                 = "mySubnet"
  virtual_network_name = "myVnet"
  resource_group_name  = "nancyResourceGroup"
}






/* terraform {
 backend "azurerm" {
    resource_group_name   = "var.resource_group_name"
    storage_account_name  = "var.storage_account_name"
    container_name        = "var.container_name"
    key                   = "var.key"
}
} */




resource "azurerm_virtual_machine_extension" "vm_extension_install_sccm" {
  name                       = "vm_extension_install_sccm"
  virtual_machine_id         = azurerm_windows_virtual_machine.vm.id
  publisher                  = "Microsoft.Compute"
  type                       = "CustomScriptExtension"
  type_handler_version       = "1.8"
  auto_upgrade_minor_version = true

  settings = <<SETTINGS
    {
        "commandToExecute": "powershell -ExecutionPolicy Unrestricted Get-Module servermanager",
        "commandToExecute": "powershell -ExecutionPolicy Unrestricted Install-WindowsFeature Web-Windows-Auth",
        "commandToExecute": "powershell -ExecutionPolicy Unrestricted Install-WindowsFeature Web-ISAPI-Ext",
        "commandToExecute": "powershell -ExecutionPolicy Unrestricted Install-WindowsFeature Web-Metabase",
        "commandToExecute": "powershell -ExecutionPolicy Unrestricted Install-WindowsFeature Web-WMI",
        "commandToExecute": "powershell -ExecutionPolicy Unrestricted Install-WindowsFeature BITS",
        "commandToExecute": "powershell -ExecutionPolicy Unrestricted Install-WindowsFeature RDC",
        "commandToExecute": "powershell -ExecutionPolicy Unrestricted Install-WindowsFeature NET-Framework-Features -source \\yournetwork\yourshare\sxs",
        "commandToExecute": "powershell -ExecutionPolicy Unrestricted Install-WindowsFeature Web-Asp-Net"
        "commandToExecute": "powershell -ExecutionPolicy Unrestricted Install-WindowsFeature Web-Asp-Net45"
        "commandToExecute": "powershell -ExecutionPolicy Unrestricted Install-WindowsFeature NET-HTTP-Activation"
        "commandToExecute": "powershell -ExecutionPolicy Unrestricted Install-WindowsFeature NET-Non-HTTP-Activ"       
    }
SETTINGS
}


Get-Module servermanager
Install-WindowsFeature Web-Windows-Auth
Install-WindowsFeature Web-ISAPI-Ext
Install-WindowsFeature Web-Metabase
Install-WindowsFeature Web-WMI
Install-WindowsFeature BITS
Install-WindowsFeature RDC
Install-WindowsFeature NET-Framework-Features -source \\yournetwork\yourshare\sxs
Install-WindowsFeature Web-Asp-Net
Install-WindowsFeature Web-Asp-Net45
Install-WindowsFeature NET-HTTP-Activation
Install-WindowsFeature NET-Non-HTTP-Activ

 # refer to a resource group
data "azurerm_resource_group" "test" {
  name = "fisontech-rg"
}

#refer to a subnet
data "azurerm_subnet" "test" {
  name                 = "default"
  virtual_network_name = "fisontech-vnet"
  resource_group_name  = "fisontech-rg"
}


 resource "azurerm_virtual_machine" "test" {
   count                 = 2
   name                  = "acctvm${count.index}"
   location              = azurerm_resource_group.test.location
 #  availability_set_id   = azurerm_availability_set.avset.id
   resource_group_name   = azurerm_resource_group.test.name
   network_interface_ids = [element(azurerm_network_interface.test.*.id, count.index)]
   vm_size               = "Standard_DS1_v2"
 }



   # Uncomment this line to delete the OS disk automatically when deleting the VM
   # delete_os_disk_on_termination = true
   
   # Uncomment this line to delete the data disks automatically when deleting the VM
   # delete_data_disks_on_termination = true
   
/*    storage_image_reference {
     publisher = "Canonical"
     offer     = "UbuntuServer"
     sku       = "16.04-LTS"
     version   = "latest"
   }
   
   storage_os_disk {
     name              = "myosdisk${count.index}"
     caching           = "ReadWrite"
     create_option     = "FromImage"
     managed_disk_type = "Standard_LRS"
   }
   
   # Optional data disks
   storage_data_disk {
     name              = "datadisk_new_${count.index}"
     managed_disk_type = "Standard_LRS"
     create_option     = "Empty"
     lun               = 0
     disk_size_gb      = "1023"
   }
   
   storage_data_disk {
     name            = element(azurerm_managed_disk.test.*.name, count.index)
     managed_disk_id = element(azurerm_managed_disk.test.*.id, count.index)
     create_option   = "Attach"
     lun             = 1
     disk_size_gb    = element(azurerm_managed_disk.test.*.disk_size_gb, count.index)
   }
   
   os_profile {
     computer_name  = "hostname"
     admin_username = "testadmin"
     admin_password = "Password1234!"
   }

   # create a network interface
resource "azurerm_network_interface" "test" {
  name                = "nic-test"
  location            = "${data.azurerm_resource_group.test.location}"
  resource_group_name = "${data.azurerm_resource_group.test.name}"

  ip_configuration {
    name                          = "testconfiguration1"
    subnet_id                     = "${data.azurerm_subnet.test.id}"
    private_ip_address_allocation = "dynamic"
    public_ip_address_id          = "${azurerm_public_ip.test.id}"
  }
} 

 resource "azurerm_managed_disk" "test" {
   count                = 2
   name                 = "datadisk_existing_${count.index}"
   location             = azurerm_resource_group.test.location
   resource_group_name  = azurerm_resource_group.test.name
   storage_account_type = "Standard_LRS"
   create_option        = "Empty"
   disk_size_gb         = "1023"
 } */
   
/*    os_profile_linux_config {
     disable_password_authentication = false
   } */
   
/*    tags = {
     environment = "staging"
   }
 } */

/*   resource "azurerm_availability_set" "avset" {
   name                         = "avset"
   location                     = azurerm_resource_group.test.location
   resource_group_name          = azurerm_resource_group.test.name
   platform_fault_domain_count  = 2
   platform_update_domain_count = 2
   managed                      = true
 }  */
